"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

from django.utils.translation import gettext_lazy as _
from environs import Env

env = Env()

ENV = env.str("ENV", "local")

IS_LAMBDA = env.str("LAMBDA_TASK_ROOT", None)

if not IS_LAMBDA:
    print("\n############################################################")
    print(f"Running as {ENV.upper()} environment")
    print("############################################################\n")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

FIXTURE_DIRS = [
    "fixtures",
]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-=f+a2*k6cxl14e$+h*1m1waizb4*-43t%es^2jx)(^j$x=5km%"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

INSTALLED_APPS = [
    "unfold",  # First third-party app
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party
    "storages",
]

PROJECT_APPS = [
    "backend.apps.accounts",
]

INSTALLED_APPS = INSTALLED_APPS + PROJECT_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

psql_engine = "django.db.backends.postgresql"
DATABASES = {
    "default": {
        "ENGINE": psql_engine,
        "NAME": env.str("POSTGRES_DB", "neon"),
        "USER": env.str("POSTGRES_USER", "neon"),
        "PASSWORD": env.str("POSTGRES_PASSWORD", "neon"),
        "HOST": env.str("POSTGRES_HOST", "localhost"),
        "PORT": env.str("POSTGRES_PORT", "5432"),
        "OPTIONS": {
            "sslmode": "require",
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "accounts.User"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


######################################################################
# STATIC FILES
######################################################################

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

SERVE_STATIC_FILES_LOCALLY = env.bool("SERVE_STATIC_FILES_LOCALLY", True)
if IS_LAMBDA:
    SERVE_STATIC_FILES_LOCALLY = False

if not SERVE_STATIC_FILES_LOCALLY:
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {},
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "bucket_name": env.str(
                    "AWS_STATIC_STORAGE_BUCKET_NAME",
                    env.str("AWS_STATIC_STORAGE_BUCKET_NAME"),
                ),
                "location": ENV,
                "region_name": env.str("AWS_DEFAULT_REGION", "us-west-1"),
                "gzip": True,
                "object_parameters": {
                    "CacheControl": "max-age=86400",
                },
            },
        },
    }
else:
    print("\n############################################################")
    print(f"Static Files Served Locally is {SERVE_STATIC_FILES_LOCALLY}")
    print("############################################################\n")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

######################################################################
# Unfold
######################################################################

UNFOLD = {"SITE_TITLE": _("Neon Admin"), "SITE_HEADER": _("Neon Admin")}
